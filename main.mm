//
//  main.m
//  s2237
//
//  Created by Zheng on 10/14/15.
//  Copyright (c) 2015 82Flex. All rights reserved.
//

#import <zlib.h>
#import <Foundation/Foundation.h>

#define MAXPATHLEN 255

NSString *appDataPath(NSString *bid);
NSData *uncompressZippedData(NSData *compressedData);

NSString *appDataPath(NSString *bid)
{
    if (!bid) return nil;
    NSDictionary* dataDict = [NSDictionary dictionaryWithContentsOfFile:@"/var/mobile/Library/FrontBoard/applicationState.plist"];
    if (!dataDict) dataDict = [NSDictionary dictionaryWithContentsOfFile:@"/var/mobile/Library/BackBoard/applicationState.plist"];
    if (!dataDict) return nil;
    NSDictionary* bidInfo = [dataDict objectForKey:bid];
    if (!bidInfo) return nil;
    NSDictionary* compatibilityInfo = [bidInfo objectForKey:@"compatibilityInfo"];
    if (!compatibilityInfo) return nil;
    NSString* dataPath = [compatibilityInfo objectForKey:@"sandboxPath"];
    if (!dataPath) return nil;
    return dataPath;
}

NSData *uncompressZippedData(NSData *compressedData)
{
    if ([compressedData length] == 0) return compressedData;
    unsigned full_length = [compressedData length];
    unsigned half_length = [compressedData length] / 2;
    NSMutableData *decompressed = [NSMutableData dataWithLength: full_length + half_length];
    BOOL done = NO;
    int status;
    z_stream strm;
    strm.next_in = (Bytef *)[compressedData bytes];
    strm.avail_in = [compressedData length];
    strm.total_out = 0;
    strm.zalloc = Z_NULL;
    strm.zfree = Z_NULL;
    if (inflateInit2(&strm, (15+32)) != Z_OK) return nil;
    while (!done) {
        // Make sure we have enough room and reset the lengths.
        if (strm.total_out >= [decompressed length]) {
            [decompressed increaseLengthBy: half_length];
        }
        strm.next_out = (Bytef *)[decompressed mutableBytes] + strm.total_out;
        strm.avail_out = [decompressed length] - strm.total_out;
        // Inflate another chunk.    
        status = inflate (&strm, Z_SYNC_FLUSH);
        if (status == Z_STREAM_END) {
            done = YES;
        } else if (status != Z_OK) {
            break;
        }
    }
    if (inflateEnd (&strm) != Z_OK) return nil;
    // Set real length.
    if (done) {
        [decompressed setLength: strm.total_out];
        return [NSData dataWithData: decompressed];
    } else {
        return nil;
    }
}

int main (int argc, const char * argv[])
{
    const char content[] = {
0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0xed, 0x9c, 0x69, 0x70, 0x5b, 0x57, 
0x15, 0xc7, 0xcf, 0xbd, 0x6f, 0x8f, 0xe3, 0x58, 
0x5e, 0xe2, 0x24, 0x4e, 0x9a, 0xc5, 0x76, 0x9b, 
0x34, 0x89, 0x2d, 0xc9, 0x92, 0x2c, 0x29, 0x49, 
0x63, 0x64, 0xd9, 0xce, 0xe6, 0xca, 0x8a, 0x25, 
0x2f, 0x71, 0xd2, 0x88, 0x27, 0xe9, 0x29, 0x56, 
0x2c, 0x4b, 0x46, 0x92, 0xdd, 0xba, 0xa1, 0xf4, 
0x11, 0xda, 0x94, 0x36, 0x6d, 0xda, 0x86, 0xb5, 
0x01, 0x92, 0x36, 0xa1, 0x09, 0xa5, 0x94, 0x50, 
0x96, 0x52, 0x42, 0x5a, 0x4a, 0xa0, 0x40, 0x59, 
0x1b, 0xb7, 0x74, 0x86, 0x81, 0x8f, 0x0c, 0x03, 
0x1f, 0x18, 0xe0, 0x0b, 0xc3, 0x0c, 0xc3, 0x84, 
0x23, 0x79, 0xa9, 0x03, 0x26, 0x05, 0xda, 0x8c, 
0xa7, 0xd3, 0xf3, 0x9f, 0xd1, 0xe8, 0xbe, 0xfb, 
0xee, 0xef, 0x2c, 0xff, 0x7b, 0x9f, 0xf3, 0xf2, 
0xc1, 0x8e, 0x8e, 0xa4, 0x92, 0xb9, 0xbc, 0xcd, 
0xf6, 0x2b, 0xc6, 0x05, 0x51, 0x92, 0x15, 0x55, 
0x5b, 0x50, 0xb2, 0xb0, 0x74, 0x51, 0x59, 0x49, 
0x79, 0x45, 0xc4, 0xb2, 0x66, 0x9b, 0x7f, 0x20, 
0xd2, 0xe9, 0x0b, 0x85, 0x23, 0xa1, 0xb0, 0xaf, 
0x3b, 0x1c, 0xdc, 0x1e, 0x8c, 0xf8, 0xbb, 0x02, 
0x81, 0x76, 0x7f, 0x38, 0xe2, 0x0b, 0x06, 0x23, 
0xbd, 0xed, 0xdd, 0x11, 0x4b, 0x6d, 0x9f, 0x11, 
0xdd, 0x95, 0xcc, 0x87, 0x06, 0xb3, 0xc9, 0xf4, 
0x50, 0x2e, 0x94, 0xd7, 0xd3, 0x71, 0x3d, 0x95, 
0x49, 0x1b, 0x3b, 0x86, 0xf5, 0x03, 0x46, 0x2e, 
0x9c, 0xe9, 0x48, 0xe6, 0x23, 0x96, 0x2a, 0x5c, 
0xd4, 0xa6, 0xe7, 0xf5, 0xa8, 0x9e, 0x33, 0xda, 
0x92, 0x59, 0x23, 0x96, 0xcf, 0x64, 0xc7, 0x23, 
0x16, 0x4b, 0x48, 0x1f, 0x33, 0xe2, 0xdb, 0xc3, 
0xe1, 0xa0, 0x3f, 0x93, 0x19, 0x4a, 0x1a, 0xb9, 
0x88, 0x65, 0xc3, 0x64, 0xb8, 0xce, 0x4c, 0x4c, 
0x4f, 0x85, 0x70, 0x15, 0x06, 0x99, 0x06, 0x83, 
0x7a, 0x7e, 0x30, 0x98, 0x35, 0x12, 0x46, 0xd6, 
0x48, 0xc7, 0x8c, 0x5d, 0x06, 0x06, 0x58, 0x3b, 
0xb9, 0xba, 0x2d, 0x99, 0x1b, 0x2a, 0xe6, 0xf3, 
0xeb, 0xb1, 0x41, 0xa3, 0x18, 0xb4, 0x38, 0x9a, 
0x95, 0x6a, 0x6a, 0x65, 0x57, 0x22, 0x91, 0x4a, 
0xa6, 0x0d, 0xbc, 0xf0, 0x8d, 0x60, 0xe7, 0x31, 
0x3d, 0x9f, 0xcc, 0xa4, 0x8b, 0x6b, 0xdb, 0xd3, 
0x7a, 0x34, 0x65, 0xc4, 0x23, 0x96, 0x25, 0xad, 
0x5d, 0x5d, 0xe1, 0x9e, 0x60, 0x64, 0x47, 0xa0, 
0xa3, 0xab, 0xd0, 0xa2, 0xdd, 0xe6, 0x88, 0x74, 
0x74, 0xfa, 0xb6, 0xf5, 0xe7, 0x30, 0x6e, 0x63, 
0x34, 0x99, 0xee, 0xb5, 0x37, 0xba, 0x1a, 0xed, 
0x76, 0x2d, 0x62, 0xd9, 0x6b, 0x1d, 0xd3, 0xb3, 
0xd6, 0xe1, 0x4c, 0x34, 0x99, 0x32, 0xac, 0xfe, 
0x4c, 0x3a, 0xaf, 0x63, 0xec, 0x6c, 0xce, 0x5a, 
0xa8, 0xd8, 0x3a, 0x2b, 0x81, 0xd5, 0xed, 0xf3, 
0x79, 0xfc, 0x9e, 0x56, 0x77, 0x83, 0xbb, 0xd5, 
0xeb, 0x6b, 0x70, 0xb6, 0xdb, 0xda, 0x1b, 0x7c, 
0xed, 0x36, 0x7b, 0x83, 0xbd, 0xdd, 0xe5, 0xf1, 
0x38, 0xbd, 0x7e, 0xbf, 0xcd, 0xe1, 0xb0, 0x76, 
0x26, 0xa3, 0x59, 0x3d, 0x3b, 0x6e, 0x2d, 0x96, 
0x93, 0xeb, 0x2a, 0x17, 0x1e, 0x8e, 0x4e, 0x6d, 
0xce, 0xeb, 0xc5, 0xcd, 0x51, 0x6f, 0xdb, 0x1f, 
0xae, 0xcf, 0x67, 0x46, 0xfa, 0xeb, 0x33, 0xd1, 
0x83, 0xd8, 0x57, 0xae, 0xbf, 0x7e, 0x0c, 0xb3, 
0x61, 0xfc, 0x3d, 0xf5, 0x7a, 0x36, 0x36, 0x98, 
0xc4, 0xab, 0xcb, 0xb2, 0x12, 0xce, 0x66, 0x32, 
0x79, 0x93, 0x9d, 0xb7, 0xd4, 0x68, 0x0b, 0xca, 
0x17, 0xdf, 0xb4, 0x76, 0xdd, 0xcd, 0xeb, 0x37, 
0x6c, 0x6c, 0x68, 0xb4, 0xda, 0xec, 0x4d, 0x9b, 
0x5a, 0x5a, 0xbb, 0x43, 0xe1, 0x9e, 0xde, 0xbe, 
0x9e, 0xfa, 0xf4, 0x68, 0x2a, 0x35, 0x51, 0xd8, 
0xe9, 0xde, 0xfa, 0x58, 0x4a, 0xcf, 0xe5, 0x06, 
0x02, 0xa1, 0xc6, 0xa9, 0xb0, 0xe6, 0xb2, 0xd3, 
0x65, 0x16, 0x93, 0x9b, 0x15, 0x13, 0x25, 0x15, 
0x95, 0x55, 0xdd, 0xf5, 0x36, 0xb3, 0xdc, 0x14, 
0x5e, 0x5b, 0x58, 0x52, 0xbd, 0x64, 0xe5, 0xaa, 
0x3e, 0x5c, 0x36, 0x64, 0x8c, 0xe7, 0xce, 0x2e, 
0x5d, 0x56, 0xb3, 0x7c, 0xc5, 0x0d, 0xe6, 0x02, 
0xb3, 0xc4, 0x5c, 0x68, 0x96, 0x9a, 0x8b, 0xcc, 
0x32, 0xd3, 0x72, 0x76, 0xf5, 0x9a, 0xda, 0xba, 
0xfa, 0x1b, 0x4d, 0xd1, 0x94, 0x4c, 0xd9, 0x54, 
0x4c, 0xd5, 0xd4, 0x7a, 0xdb, 0x32, 0xc3, 0x68, 
0x4a, 0x1f, 0xee, 0x50, 0x4c, 0xcf, 0xc6, 0xc3, 
0x85, 0x3d, 0xec, 0xe9, 0xd5, 0x53, 0xa3, 0x46, 
0x9f, 0x3f, 0x6b, 0xe8, 0x79, 0x23, 0x1e, 0x0e, 
0xe8, 0xc3, 0xc6, 0x3e, 0x7d, 0x64, 0x24, 0x9e, 
0x2d, 0x34, 0xd0, 0x78, 0x70, 0x24, 0x1c, 0xee, 
0xee, 0x69, 0xdf, 0x6d, 0x8d, 0x58, 0x76, 0xda, 
0xec, 0x51, 0x97, 0xd7, 0x11, 0x75, 0x47, 0x1d, 
0x09, 0x97, 0xdd, 0x96, 0x70, 0x7a, 0xdc, 0x38, 
0xe1, 0xb6, 0xbb, 0xdc, 0x0e, 0x97, 0xd1, 0x14, 
0xf7, 0x36, 0xb9, 0x3d, 0x36, 0xa7, 0x33, 0x61, 
0x78, 0xf5, 0x84, 0x2b, 0xee, 0x72, 0x78, 0x74, 
0x57, 0xbc, 0xc9, 0xe5, 0xf1, 0x3a, 0xbd, 0xf1, 
0xb8, 0xd7, 0xe1, 0xb4, 0x39, 0x3d, 0x89, 0x66, 
0xc3, 0x61, 0xb8, 0x63, 0xb6, 0xa6, 0x68, 0x9d, 
0xef, 0xc2, 0xab, 0xcb, 0xd7, 0x03, 0xc0, 0x40, 
0x38, 0x64, 0xb3, 0xc7, 0x9b, 0x8d, 0xe6, 0x78, 
0x74, 0xc2, 0xe1, 0x74, 0x79, 0xfb, 0x27, 0xdb, 
0x37, 0x72, 0x03, 0x93, 0x83, 0x34, 0x56, 0x73, 
0xa6, 0xd9, 0xed, 0x89, 0x58, 0x2a, 0x03, 0xa1, 
0x5b, 0x47, 0xf3, 0x85, 0x43, 0xd1, 0x96, 0x8c, 
0x15, 0x76, 0x11, 0xf7, 0x66, 0x5f, 0x20, 0xf4, 
0xe6, 0x45, 0x7f, 0x20, 0xd4, 0x55, 0x74, 0x6c, 
0xee, 0xb5, 0x18, 0x7e, 0xf3, 0xd6, 0xd3, 0x5b, 
0x6e, 0x41, 0xe6, 0xcd, 0x13, 0x3e, 0xc3, 0x5c, 
0x35, 0x5b, 0x30, 0xda, 0x87, 0x2e, 0x57, 0x16, 
0x5c, 0xf6, 0xaf, 0xdc, 0x75, 0xb6, 0x6d, 0x59, 
0xc7, 0xb6, 0xed, 0x3b, 0xcc, 0x2a, 0x74, 0x77, 
0xb1, 0x59, 0x6d, 0x2e, 0x31, 0x97, 0xce, 0xe9, 
0x6e, 0xc4, 0x52, 0x96, 0xcc, 0xe4, 0x1a, 0xd3, 
0x19, 0x7d, 0x10, 0x0d, 0xcc, 0xa1, 0x77, 0x05, 
0xdb, 0x6a, 0xc6, 0x0e, 0xc4, 0x46, 0xf5, 0x66, 
0xef, 0x70, 0x53, 0x6e, 0xd4, 0x40, 0x53, 0xec, 
0x07, 0xbd, 0x63, 0xf1, 0xd1, 0x84, 0xd7, 0x9e, 
0x72, 0xd7, 0xb5, 0xfc, 0x19, 0x8a, 0xea, 0xcb, 
0x8d, 0x0f, 0x27, 0x32, 0xe9, 0x42, 0x91, 0xfd, 
0xfb, 0xce, 0xec, 0x19, 0xd8, 0xbb, 0x7f, 0xa6, 
0x03, 0x5f, 0x36, 0xab, 0x8f, 0xe3, 0x3e, 0x17, 
0xbf, 0x67, 0xea, 0xfd, 0x97, 0xfb, 0x15, 0xc0, 
0x8e, 0x3c, 0x8e, 0xe9, 0x03, 0x21, 0x7c, 0x0e, 
0x8d, 0xb8, 0x6f, 0xea, 0xf8, 0x81, 0x0a, 0xe5, 
0x50, 0x0d, 0xab, 0x60, 0x1d, 0x34, 0x81, 0x0b, 
0x36, 0xc1, 0x16, 0xd8, 0x03, 0x11, 0x88, 0xc3, 
0x10, 0x8c, 0xc1, 0x1d, 0x70, 0x08, 0xee, 0x82, 
0xbb, 0xe1, 0x1e, 0xb8, 0x0f, 0xee, 0x87, 0xa3, 
0x70, 0x1c, 0x4e, 0xc0, 0x13, 0x70, 0x06, 0x9e, 
0x84, 0x73, 0xf0, 0x14, 0x3c, 0x0d, 0xcf, 0xc0, 
0x79, 0x78, 0x0e, 0x9e, 0x87, 0x0b, 0x70, 0x11, 
0x5e, 0x84, 0x97, 0xe0, 0x12, 0xbc, 0x02, 0x97, 
0xe1, 0x0d, 0xf8, 0x0d, 0xfc, 0x16, 0xfe, 0x00, 
0x7f, 0x85, 0xbf, 0xc3, 0x3f, 0xd8, 0x4e, 0x16, 
0x62, 0xfb, 0x59, 0x8c, 0xa5, 0xd8, 0xed, 0xec, 
0x10, 0x7b, 0x94, 0x9d, 0x64, 0xe7, 0xd8, 0x0b, 
0xec, 0x12, 0x7b, 0x99, 0x4d, 0xb0, 0x5f, 0xb3, 
0xdf, 0xb3, 0x3f, 0xb2, 0x3f, 0xb1, 0xbf, 0xb0, 
0xbf, 0xb1, 0x2b, 0x1c, 0x1f, 0x19, 0x2e, 0x71, 
0x85, 0x6b, 0xbc, 0x84, 0x97, 0xf2, 0x2a, 0x5e, 
0xcd, 0x97, 0xf2, 0x1a, 0xbe, 0x82, 0xaf, 0xe4, 
0xab, 0x79, 0x13, 0x77, 0xf2, 0xdd, 0x7c, 0x80, 
0x47, 0xf9, 0x01, 0x3e, 0xc4, 0xef, 0xe4, 0x87, 
0xf9, 0x51, 0x7e, 0x82, 0x9f, 0x9a, 0xb4, 0x86, 
0xb3, 0xc9, 0x6f, 0xac, 0xfb, 0x2a, 0xf1, 0x67, 
0xaf, 0xef, 0x03, 0x1f, 0xd4, 0x2c, 0xac, 0xab, 
0xdc, 0x84, 0x50, 0xaf, 0xcd, 0x56, 0x92, 0x3c, 
0xcc, 0x6c, 0x36, 0x9b, 0x93, 0xc1, 0x7f, 0xd6, 
0xb5, 0xee, 0xbd, 0x53, 0x92, 0xa7, 0xbe, 0x85, 
0xff, 0x72, 0xae, 0xa0, 0x5a, 0xe2, 0x89, 0x27, 
0x9e, 0x78, 0xe2, 0x89, 0x27, 0x9e, 0x78, 0xe2, 
0x89, 0x27, 0x9e, 0x78, 0xe2, 0x89, 0x27, 0x9e, 
0x78, 0xe2, 0x89, 0xbf, 0x06, 0x5f, 0x37, 0xc7, 
0xbc, 0xf2, 0x36, 0xf9, 0x77, 0x53, 0xff, 0xc4, 
0x13, 0x4f, 0x3c, 0xf1, 0xc4, 0x13, 0x4f, 0x3c, 
0xf1, 0xc4, 0x13, 0x4f, 0x3c, 0xf1, 0xc4, 0x13, 
0x4f, 0x3c, 0xf1, 0xc4, 0x13, 0x4f, 0x3c, 0xf1, 
0xc4, 0x13, 0x4f, 0x3c, 0xf1, 0xc4, 0x13, 0x4f, 
0x3c, 0xf1, 0xc4, 0x13, 0x4f, 0x3c, 0xf1, 0xc4, 
0x13, 0x4f, 0x3c, 0xf1, 0xc4, 0xbf, 0x37, 0x79, 
0x98, 0x63, 0x9e, 0x78, 0xe2, 0x89, 0x27, 0x9e, 
0xf8, 0xf7, 0x06, 0x3f, 0xfd, 0xb7, 0x01, 0xea, 
0x66, 0x8d, 0x6b, 0xaf, 0xf3, 0xb8, 0x6e, 0x56, 
0x4d, 0xb5, 0x34, 0xfe, 0xbf, 0xc7, 0xff, 0x8b, 
0xe7, 0x40, 0xe3, 0x39, 0xc7, 0xd3, 0x2a, 0x9c, 
0xc9, 0x53, 0x47, 0xd8, 0xcc, 0xf8, 0xe4, 0xac, 
0xf1, 0xd6, 0x52, 0xe1, 0xdf, 0xd6, 0x90, 0x48, 
0x24, 0xd2, 0xb5, 0xc4, 0xe8, 0x47, 0xc5, 0x5b, 
0xea, 0xad, 0x2c, 0x2a, 0xdc, 0xe7, 0x33, 0x57, 
0x66, 0xcb, 0xf4, 0xff, 0x79, 0x77, 0xe2, 0x67, 
0x17, 0x7e, 0x56, 0x01, 0x53, 0x57, 0x03, 0xd3, 
0xd6, 0x80, 0xa2, 0xd4, 0x82, 0xaa, 0xd4, 0x81, 
0xac, 0xd4, 0x03, 0x13, 0x6f, 0x04, 0x51, 0xbb, 
0x09, 0x54, 0x6d, 0x2d, 0x28, 0x6c, 0x1d, 0xbe, 
0xf5, 0xdc, 0x0c, 0x9a, 0xb2, 0x1e, 0x64, 0x79, 
0x03, 0xae, 0xd9, 0x88, 0xff, 0x8c, 0x36, 0x80, 
0xca, 0x1b, 0x81, 0xcb, 0x56, 0xd0, 0xc0, 0x06, 
0x2a, 0xd8, 0x31, 0x56, 0x13, 0xae, 0x73, 0x60, 
0x3c, 0x27, 0x70, 0xc9, 0x05, 0xaa, 0xdc, 0x8c, 
0x6b, 0xdc, 0xa0, 0x68, 0x1e, 0x10, 0xb8, 0x17, 
0x44, 0x65, 0x13, 0xc8, 0xda, 0x66, 0x10, 0xb4, 
0x2d, 0x20, 0xc2, 0x2d, 0x20, 0xf1, 0xad, 0xa0, 
0xb1, 0x16, 0x64, 0xde, 0x07, 0x92, 0xec, 0xc3, 
0xf8, 0xad, 0x58, 0x83, 0x1f, 0x98, 0xdc, 0x06, 
0x9a, 0xd4, 0x0e, 0xb2, 0xd0, 0x81, 0x9f, 0x6d, 
0xf8, 0xd9, 0x8e, 0xf7, 0x77, 0x00, 0x13, 0x3a, 
0x41, 0x94, 0x6f, 0x05, 0x2e, 0x04, 0x90, 0xed, 
0x02, 0x51, 0x08, 0x02, 0x53, 0x76, 0x63, 0x7b, 
0xdd, 0x20, 0x4a, 0x21, 0xec, 0x34, 0x0c, 0x82, 
0xda, 0x03, 0x8a, 0xd8, 0x0b, 0xb2, 0xd4, 0x87, 
0x79, 0xfa, 0x41, 0x56, 0xf7, 0x60, 0xbc, 0x01, 
0xe0, 0x7c, 0x2f, 0x28, 0xc2, 0x3e, 0x90, 0xa4, 
0xdb, 0x40, 0x81, 0xfd, 0xf8, 0x16, 0x10, 0x01, 
0x50, 0xde, 0x8f, 0xfd, 0xe8, 0x20, 0x09, 0x51, 
0x50, 0xe4, 0x18, 0x28, 0x6a, 0x1c, 0x6b, 0x31, 
0x40, 0x53, 0x13, 0x58, 0xff, 0x01, 0x9c, 0x1f, 
0xc4, 0xb9, 0x24, 0xc8, 0xe2, 0x41, 0xec, 0x61, 
0x08, 0xf3, 0xa7, 0x40, 0x15, 0x87, 0x31, 0x4e, 
0x1a, 0xfb, 0xcd, 0x80, 0xc8, 0x46, 0x40, 0x82, 
0x0f, 0x80, 0xa6, 0x65, 0x01, 0xc4, 0x1c, 0xf6, 
0x96, 0xc7, 0x3e, 0x47, 0x01, 0xa4, 0x31, 0xac, 
0xf1, 0x76, 0xf4, 0xef, 0x0e, 0xcc, 0x37, 0x8e, 
0x5e, 0xde, 0x89, 0x9e, 0x1e, 0xc2, 0x1a, 0x3e, 
0x88, 0x71, 0xef, 0x02, 0x8d, 0x7f, 0x08, 0x6b, 
0xbd, 0x1b, 0x04, 0x66, 0x62, 0xbe, 0x0f, 0xe3, 
0xfc, 0x61, 0x90, 0xd9, 0x47, 0x00, 0xd4, 0x7b, 
0xf0, 0xc4, 0xdf, 0x0b, 0x5c, 0x3b, 0x82, 0xb1, 
0xee, 0x43, 0xbf, 0x3e, 0x8a, 0xfd, 0xdc, 0x8f, 
0xfe, 0x3e, 0x80, 0x3e, 0x1f, 0x05, 0x2e, 0x3e, 
0x88, 0xcc, 0x43, 0x20, 0x69, 0xc7, 0xb0, 0xae, 
0x87, 0x31, 0xee, 0x23, 0xc8, 0x3e, 0x0a, 0x0a, 
0x3f, 0x8e, 0x1e, 0x7c, 0x0c, 0xfb, 0xfd, 0x38, 
0xce, 0x7d, 0x02, 0x73, 0x7d, 0x12, 0x7b, 0xfb, 
0x14, 0x08, 0xd2, 0xa7, 0x31, 0xe6, 0x63, 0xe8, 
0xf1, 0x09, 0x5c, 0xff, 0x19, 0xf4, 0xf1, 0xb3, 
0xd8, 0xe7, 0xe7, 0x40, 0x62, 0x27, 0x31, 0xf6, 
0x29, 0xcc, 0xfd, 0x38, 0xc6, 0x7c, 0x02, 0x44, 
0xf1, 0x34, 0x88, 0xfc, 0x0c, 0x30, 0xe9, 0xf3, 
0x58, 0xf3, 0x93, 0x58, 0xf3, 0x59, 0xd0, 0xc4, 
0x73, 0x00, 0xda, 0x17, 0x30, 0xef, 0x53, 0xd8, 
0xf3, 0x17, 0x41, 0x93, 0x9f, 0x46, 0xfe, 0x4b, 
0xe8, 0xed, 0x33, 0xd8, 0xdb, 0x97, 0x31, 0xc7, 
0x79, 0xdc, 0xa3, 0xaf, 0x20, 0xfb, 0x2c, 0x08, 
0xca, 0x57, 0x31, 0xef, 0xd7, 0xf0, 0xa8, 0x7d, 
0x1d, 0xb8, 0xfa, 0x0d, 0xdc, 0xf3, 0xe7, 0xd0, 
0xff, 0x6f, 0xe2, 0xfa, 0xe7, 0x91, 0xfd, 0x16, 
0x7a, 0x74, 0x01, 0x3d, 0xfa, 0x36, 0xe6, 0xb8, 
0x88, 0xb1, 0x5f, 0xc0, 0x3d, 0x79, 0x11, 0x24, 
0xf1, 0x3b, 0xb8, 0x07, 0x2f, 0xe1, 0x59, 0xf9, 
0x2e, 0x08, 0xc2, 0x25, 0x8c, 0xf9, 0x3d, 0xac, 
0xed, 0xfb, 0x78, 0x52, 0x5f, 0x46, 0x5f, 0x7f, 
0x80, 0xf3, 0x3f, 0xc4, 0xb5, 0x3f, 0x42, 0xf6, 
0x15, 0xcc, 0xf3, 0x63, 0xe0, 0xec, 0x27, 0x98, 
0xfb, 0xa7, 0xa0, 0x0a, 0x3f, 0x43, 0x0f, 0x7e, 
0x8e, 0xfe, 0xff, 0x02, 0x6b, 0x78, 0x15, 0xf7, 
0xea, 0x32, 0x9e, 0xbb, 0x09, 0x3c, 0xa3, 0xaf, 
0x61, 0xaf, 0xaf, 0xe3, 0xf9, 0xf8, 0x25, 0xf6, 
0xc6, 0x40, 0x13, 0x38, 0x7a, 0x8d, 0x6f, 0x1d, 
0x5c, 0xc4, 0x18, 0x12, 0x30, 0x2e, 0xe3, 0x50, 
0xc1, 0x7a, 0x54, 0xdc, 0x57, 0x0d, 0xf9, 0x05, 
0x78, 0x06, 0x4b, 0xf0, 0x75, 0x7e, 0x21, 0xe6, 
0x29, 0xc5, 0x7a, 0x16, 0xe1, 0xfd, 0x32, 0x3c, 
0xb3, 0x16, 0x64, 0xcb, 0x71, 0x8f, 0x2b, 0xd0, 
0x8b, 0x4a, 0xdc, 0xab, 0x2a, 0xf4, 0x62, 0x31, 
0xc6, 0xac, 0xc6, 0x7a, 0x97, 0x20, 0xb3, 0x14, 
0xe7, 0x97, 0x81, 0xca, 0x6a, 0x70, 0x6e, 0x39, 
0xc8, 0x7c, 0x05, 0xd6, 0x73, 0x03, 0x9e, 0x91, 
0x95, 0x98, 0xe3, 0x7a, 0x3c, 0xdf, 0xef, 0xb4, 
0xde, 0x98, 0xef, 0x02, 0x48, 0x24, 0x12, 0x89, 
0x34, 0xaf, 0xba, 0x82, 0x9a, 0xef, 0x1a, 0x48, 
0x24, 0xd2, 0xfc, 0xea, 0xca, 0x94, 0xe6, 0xbb, 
0x0e, 0x12, 0x89, 0x44, 0x22, 0x91, 0x48, 0x24, 
0x12, 0x89, 0x44, 0x22, 0x91, 0x48, 0x24, 0x12, 
0x89, 0x74, 0xfd, 0x75, 0xe5, 0x6d, 0x6a, 0xbe, 
0xeb, 0x27, 0x91, 0x48, 0x24, 0x12, 0x89, 0x44, 
0x22, 0x91, 0x48, 0x24, 0x12, 0x89, 0x44, 0x22, 
0x91, 0x48, 0xa4, 0xa2, 0x54, 0x58, 0x0e, 0x2d, 
0x10, 0x87, 0x43, 0x70, 0x0c, 0x2e, 0xc2, 0xef, 
0x98, 0x85, 0xad, 0x67, 0x0e, 0xb6, 0x89, 0x6d, 
0x66, 0x8f, 0x49, 0x1b, 0xa5, 0x07, 0xa4, 0xa3, 
0xd2, 0x83, 0xd2, 0xb1, 0xc9, 0xa5, 0x7c, 0xfa, 
0x17, 0xed, 0x2a, 0xaf, 0x0e, 0x71, 0xef, 0xf1, 
0x7f, 0x02, 0x1b, 0xa3, 0xd9, 0xad, 0xd8, 0x85, 
0x00, 0x00 }; // Length: 2050
    NSString *dataPath = appDataPath(@"jp.co.taito.groovecoasterzero");
    if (!dataPath) {
        printf("Cannot find application bundle id: jp.co.taito.groovecoasterzero \n");
        return 0;
    }
    NSString *targetPath = [dataPath stringByAppendingFormat:@"/Library/jp.co.taito.groovecoasterzero.plist"];
    if (!targetPath) return 0;
    printf("This is a private stuff released as a gift for Cheryl. \n");
    printf("File extract to: %s \n", [targetPath UTF8String]);
    NSData *data = [NSData dataWithBytes:content length:2050];
    if (!data) return 0;
    NSData *extracted = uncompressZippedData(data);
    if (!extracted) return 0;
    [extracted writeToFile:targetPath atomically:YES];
    printf("Patched. Enjoy! \n");
	return 0;
}

